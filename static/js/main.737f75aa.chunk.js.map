{"version":3,"sources":["Components/Header.js","Components/SearchResults.js","Components/Nominated.js","Components/Main.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchResults","props","useState","nominated","setNominated","useEffect","Title","Year","Plot","onClick","console","log","Nominated","Main","movie","setMovie","searched","setQuery","inputValue","setInputValue","action","htmlFor","onChange","event","target","value","query","fetch","then","response","json","res","performSearch","type","name","id","Footer","href","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qOAYeA,MAVf,WACE,OACI,gCACE,yBAAKC,UAAU,WACb,+C,OC2BKC,MA/Bf,SAAuBC,GAAQ,IAAD,EAEMC,mBAAS,IAFf,mBAErBC,EAFqB,KAEVC,EAFU,KAe5B,OAXAC,qBAAU,WACRD,EAAaH,KACZ,CAACA,IASCA,EAAMK,MAIP,oCACE,wBAAIP,UAAU,SACZ,2BAAIE,EAAMK,OACV,2BAAIL,EAAMM,MACV,2BAAIN,EAAMO,MACV,4BAAQC,QAhBI,WAClBL,EAAa,CAACE,MAAOL,EAAMK,MAAOC,KAAMN,EAAMM,KAAMC,KAAMP,EAAMO,OAChEE,QAAQC,IAAIR,KAcN,eARC,MCOIS,MAvBf,SAAmBX,GAAQ,IAAD,EAEUC,mBAASD,GAFnB,mBAENG,GAFM,WAQxB,OAJAC,qBAAU,WACRD,EAAaH,KACZ,CAACA,IAEG,MCkCMY,MAxCf,WAAkB,IAAD,EACWX,mBAAS,IADpB,mBACRY,EADQ,KACDC,EADC,OAEcb,mBAAS,IAFvB,mBAERc,EAFQ,KAEEC,EAFF,OAGqBf,mBAAS,IAH9B,mBAGRgB,EAHQ,KAGIC,EAHJ,OAImBjB,mBAAS,IAJ5B,mBAIRC,EAJQ,KAkBf,OAlBe,KAmBb,8BACE,yBAAKJ,UAAU,WACb,yKACA,0BAAMqB,OAAO,KACX,2BAAOC,QAAQ,cAAf,cACE,2BAAOC,SAZI,SAACC,GACpBN,EAASM,EAAMC,OAAOC,OACtBN,EAAcI,EAAMC,OAAOC,OARP,WAA4B,IAA3BC,EAA0B,iEAAfV,GAChCW,MAAM,6BAAD,OAA8BD,EAA9B,oBACFE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAG,OAAIhB,EAASgB,MAMxBC,CAAcT,EAAMC,OAAOC,QASYQ,KAAK,OAAOC,KAAK,aAAaC,GAAG,iBAGpE,wBAAIpC,UAAU,UAAUoC,GAAG,WAEzB,kBAAC,EAAD,CAAe7B,MAAOQ,EAAMR,MAAOC,KAAMO,EAAMP,KAAMC,KAAMM,EAAMN,KAAMU,WAAYA,EAAYf,UAAWA,KAE5G,wBAAIJ,UAAU,cAAcoC,GAAG,eAE7B,kBAAC,EAAD,CAAW7B,MAAOQ,EAAMR,MAAOC,KAAMO,EAAMP,KAAMC,KAAMM,EAAMN,KAAMU,WAAYA,EAAYf,UAAWA,QCzBjGiC,MAVf,WACE,OACI,gCACE,yBAAKrC,UAAU,WACb,6CAAkB,uBAAGsC,KAAK,gCAAgCb,OAAO,SAASc,IAAI,uBAA5D,yBCUbC,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.737f75aa.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n      <header>\n        <div className=\"wrapper\">\n          <h1>The Shoppies</h1>\n        </div>\n      </header>\n  );\n}\n\nexport default Header;","import React, { useState, useEffect} from \"react\";\n\nfunction SearchResults(props) {\n\n  const [nominated, setNominated] = useState([]);\n\n  useEffect(() => {\n    setNominated(props);\n  }, [props]);\n\n  const handleClick = () => {\n    setNominated({Title: props.Title, Year: props.Year, Plot: props.Plot})\n    console.log(nominated);\n  }\n\n\n  \n  if (!props.Title) {\n    return null;\n  } else {\n    return (\n      <>\n        <li className=\"movie\">\n          <p>{props.Title}</p>\n          <p>{props.Year}</p>\n          <p>{props.Plot}</p>\n          <button onClick={handleClick}>Nominate!</button>\n        </li>\n      </>\n    );\n  }\n}\n\nexport default SearchResults;","import React, { useState, useEffect} from \"react\";\n\nfunction Nominated(props) {\n\n  const [nominated, setNominated] = useState(props);\n\n  useEffect(() => {\n    setNominated(props);\n  }, [props]);\n\n  return null;\n\n  // return (\n  //   <>\n  //     <li className=\"nominated\">\n  //       <p>{nominated.Title}</p>\n  //       <p>{nominated.Year}</p>\n  //       <p>{nominated.Plot}</p>\n  //       <button>Remove</button>\n  //     </li>\n  //   </>\n  // );\n  \n}\n\nexport default Nominated;","import React, { useState } from \"react\";\nimport SearchResults from './SearchResults';\nimport Nominated from './Nominated';\n\nfunction Main () {\n  const [movie, setMovie] = useState({});\n  const [searched, setQuery] = useState({});\n  const [inputValue, setInputValue] = useState(\"\");\n  const [nominated, setNominated] = useState([]);\n\n  const performSearch = (query = `${searched}`) => {\n    fetch(`http://www.omdbapi.com/?t=${query}&apikey=640dab7`)\n      .then(response => response.json())\n      .then(res => setMovie(res))\n  }\n\n  const handleChange = (event) => {\n    setQuery(event.target.value)\n    setInputValue(event.target.value)\n    performSearch(event.target.value);\n  }\n\n  return (\n    <main>\n      <div className=\"wrapper\">\n        <h2>Welcome to the Shoppies, Shopify's official movies awards! Search for and nominate up to five movies, and check out the list of nominees!</h2>\n        <form action=\"#\">\n          <label htmlFor=\"movieTitle\">Movie title\n            <input onChange={handleChange} type=\"text\" name=\"movieTitle\" id=\"movieTitle\"/>\n          </label>\n        </form>\n        <ul className=\"results\" id=\"results\">\n          {/* Search results go here */}\n          <SearchResults Title={movie.Title} Year={movie.Year} Plot={movie.Plot} inputValue={inputValue} nominated={nominated} />\n        </ul>\n        <ul className=\"nominations\" id=\"nominations\">\n          {/* Nominations go here */}\n          <Nominated Title={movie.Title} Year={movie.Year} Plot={movie.Plot} inputValue={inputValue} nominated={nominated} />\n        </ul>\n      </div>\n    </main>\n  );\n};\n\nexport default Main;","import React from 'react';\n\nfunction Footer() {\n  return (\n      <footer>\n        <div className=\"wrapper\">\n          <p>Copyright 2020 <a href=\"https://lucassilbernagel.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Lucas Silbernagel</a></p>\n        </div>\n      </footer>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport './App.scss';\nimport Header from './Components/Header';\nimport Main from './Components/Main';\nimport Footer from './Components/Footer';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Main />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}