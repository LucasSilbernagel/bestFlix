{"version":3,"sources":["Components/Header.js","Components/SearchResults.js","Components/Nominated.js","Components/firebase.js","Components/Save.js","Components/Loading.js","Components/Main.js","Components/Nominations.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchResults","props","nominatedID","nominated","map","nominatedFilm","imdbID","movies","movie","includes","key","src","Poster","alt","Title","Year","disabled","onClick","e","setNominated","concat","length","Swal","fire","title","confirmButtonColor","text","confirmButtonText","Nominated","removeNomination","index","target","getAttribute","newArray","splice","item","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Save","dbRef","database","ref","push","ID","Votes","then","window","location","reload","Loading","loading","Main","useState","setMovies","searched","setQuery","inputValue","setInputValue","setLoading","to","id","action","htmlFor","onChange","event","value","query","setTimeout","fetch","response","ok","json","Error","res","Search","catch","error","console","log","performSearch","type","name","placeholder","Nominations","displayedNominations","setDisplayedNominations","useEffect","on","newState","data","val","sortedNominations","filter","v","i","a","findIndex","t","sort","b","parseFloat","movieArray","once","result","results","set","incrementVotes","aria-label","Footer","href","rel","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7e1e4462.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n      <header>\n        <div className=\"wrapper\">\n          <h1>bestFlix</h1>\n        </div>\n      </header>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport Swal from 'sweetalert2';\n\nfunction SearchResults(props) {\n\n  // Nominate a movie from search results\n  const handleClick = (e) => {\n    props.setNominated(props.nominated.concat(e));\n    // Sweet alerts\n    // First movie nominated\n    if (props.nominated.length === 0) {\n      Swal.fire({\n        title: 'Nominated!',\n        confirmButtonColor: \"#00806a\",\n        text: \"You can nominate up to 4 movies. Once you're ready, save them to the official list of nominees!\",\n        confirmButtonText: 'Ok',\n      })\n      // Max movies nominated\n    } else if (props.nominated.length === 3) {\n      Swal.fire({\n        title: 'Nominated!',\n        confirmButtonColor: \"#00806a\",\n        text: \"You've nominated 4 movies! Save them to the official list of nominees, or change your nomination list first by removing one or more movies!\",\n        confirmButtonText: 'Ok',\n      })\n    }\n    else {\n      Swal.fire({\n        title: 'Nominated!',\n        confirmButtonColor: \"#00806a\",\n        confirmButtonText: 'Ok',\n      })\n    }\n  }\n\n  // The ID of each nominated movie\n  let nominatedID = props.nominated.map((nominatedFilm) => {\n    return nominatedFilm.imdbID;\n  })\n\n  // If nothing is searched, return nothing\n  if (!props.movies) {\n    return null;\n  } else {\n    let newMovie = props.movies.map((movie) => {\n\n      // If searched movie has already been nominated, disable the nomination button\n      if (nominatedID.includes(movie.imdbID)) {\n        return (\n          <li className=\"movie\" key={movie.imdbID}>\n            <div className=\"imgContainer\">\n              <img src={movie.Poster} alt={movie.Title} />\n            </div>\n            <div className=\"movieText\">\n              <p><span className=\"info\">Title</span>: {movie.Title}</p>\n              <p><span className=\"info\">Year</span>: {movie.Year}</p>\n            </div>\n            <button disabled={true} className=\"nominate disabled\">Nominate!</button>\n          </li>\n        );\n\n        // If searched movie has not been nominated, display the nomination button normally\n      } else {\n        return (\n          <li className=\"movie\" key={movie.imdbID}>\n            <div className=\"imgContainer\">\n              <img src={movie.Poster} alt={movie.Title} />\n            </div>\n            <div className=\"movieText\">\n              <p><span className=\"info\">Title</span>: {movie.Title}</p>\n              <p><span className=\"info\">Year</span>: {movie.Year}</p>\n            </div>\n            <button onClick={() => handleClick(movie)} className=\"nominate\">Nominate!</button>\n          </li>\n        );\n      }\n      })\n    return newMovie;\n  }\n}\n\nexport default SearchResults;","import React from \"react\";\n\nfunction Nominated({ nominated, setNominated }) {\n\n  // Remove nomination from list when Remove button is clicked\n  const removeNomination = (e) => {\n    let index = e.target.getAttribute(\"index\");\n    if (index > -1) {\n      let newArray = [...nominated];\n      newArray.splice(index, 1);\n      setNominated(newArray);\n    }\n  };\n\n  // If user has not nominated any movies, return nothing for this component\n  if (!nominated) {\n    return null;\n    \n    // Display each movie the user nominates\n  } else {\n    return nominated.map((item, index) => {\n      return (\n        <li key={index} className=\"movie\">\n          <h3>Nomination #{index + 1}:</h3>\n          <div className=\"imgContainer\">\n            <img src={item.Poster} alt={item.Title} />\n          </div>\n          <div className=\"movieText\">\n            <p><span className=\"info\">Title</span>: {item.Title}</p>\n            <p><span className=\"info\">Year</span>: {item.Year}</p>\n          </div>\n          <button onClick={removeNomination} index={index} className=\"nominate\">Remove nomination</button>\n        </li>\n      );\n    });\n  }\n}\n\nexport default Nominated;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDZtyyJl0JQTRgDuEg9mZbneHNpF5ArlIc\",\n  authDomain: \"bestflix-80621.firebaseapp.com\",\n  databaseURL: \"https://bestflix-80621.firebaseio.com\",\n  projectId: \"bestflix-80621\",\n  storageBucket: \"bestflix-80621.appspot.com\",\n  messagingSenderId: \"661618832641\",\n  appId: \"1:661618832641:web:53533ceed3f183e5129700\"\n};\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React from \"react\";\nimport firebase from './firebase';\nimport Swal from 'sweetalert2';\n\nfunction Save({ nominated, setNominated }) {\n\n  // Push saved movie nominations to firebase\n  const saveNominations = () => {\n    const dbRef = firebase.database().ref();\n    nominated.map((movie) => {\n      return dbRef.push({\n        Poster: movie.Poster,\n        Title: movie.Title,\n        Year: movie.Year,\n        ID: movie.imdbID,\n        Votes: 1\n      })\n    })\n    setNominated([]);\n    // Sweet alert\n    Swal.fire({\n      title: 'Nominations saved!',\n      text: 'Make sure to check out the official list of nominees!',\n      confirmButtonColor: \"#00806a\",\n      confirmButtonText: 'Ok',\n    }).then(function () {\n      window.location.reload();\n    })\n  }\n\n  // When a movie is nominated, display a button to save nominations and push to firebase\n  if (!nominated.length) {\n    return null;\n  } else {\n    return (\n      <button onClick={saveNominations}>Save nominations!</button>\n    );\n  }\n}\n\nexport default Save;","import React from \"react\";\n\nfunction Loading(props) {\n\n  if (!props.loading) {\n    return null;\n  } else {\n    return (\n      <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n    )\n  }\n}\n\nexport default Loading;","import React, { useState } from \"react\";\nimport SearchResults from './SearchResults';\nimport Nominated from './Nominated';\nimport { Link } from \"react-router-dom\";\nimport Save from './Save';\nimport Loading from './Loading';\n\nfunction Main () {\n  const [movies, setMovies] = useState([]);\n  const [searched, setQuery] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [nominated, setNominated] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // API call\n  const performSearch = (query = `${searched}`) => {\n    setLoading(true)\n    setTimeout(() => {\n      fetch(`https://www.omdbapi.com/?type=movie&s=${query}&apikey=2b4018f5`).then((response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong');\n        }\n      })\n      .then(res => setMovies(res.Search))\n      .catch((error) => {\n        console.log(error)\n      })\n      .then(setLoading(false))\n    }, 1000)\n  }\n\n  // As text input content changes, update API search query and make API call\n  const handleChange = (event) => {\n    setQuery(event.target.value)\n    setInputValue(event.target.value)\n    performSearch(event.target.value);\n  }\n\n  // If user has nominated 4 movies, prevent them from searching for more.\n  if (nominated.length === 4) {\n    return (\n      <main>\n        <div className=\"wrapper\">\n          <div className=\"centerWrapper\">\n            <h2>Welcome to bestFlix, the best movies of all time as voted by you! Search for and nominate up to four movies, and vote for your favourites on the official list of nominees!</h2>\n          </div>\n          <div className=\"saveContainer\">\n            <Save nominated={nominated} setNominated={setNominated} />\n          </div>\n          <Link to=\"/bestFlix/nominations\" className=\"link\">View nominees <span><i className=\"fas fa-arrow-right\"></i></span></Link>\n          <ul className=\"nominations\" id=\"nominations\">\n            {/* Nominations go here */}\n            <Nominated nominated={nominated} setNominated={setNominated} />\n          </ul>\n          <div className=\"saveContainer\">\n            <Save nominated={nominated} setNominated={setNominated} />\n          </div>\n        </div>\n      </main>\n    );\n    // If user has nominated less than 4 movies, allow them to continue to nominate more.\n  } else {\n    return (\n      <main>\n        <div className=\"wrapper\">\n          <div className=\"centerWrapper\">\n            <h2>Welcome to bestFlix, the best movies of all time as voted by you! Search for and nominate up to four movies, and vote for your favourites on the official list of nominees.</h2>\n          </div>\n          <Link to=\"/bestFlix/nominations\" className=\"link\">View nominees <span><i className=\"fas fa-arrow-right\"></i></span></Link>\n          <div className=\"centerWrapper\">\n          <form action=\"#\">\n            <label htmlFor=\"movieTitle\" className=\"sr-only\">Movie title:</label>\n            <input onChange={handleChange} type=\"text\" name=\"movieTitle\" className=\"movieTitle\" id=\"movieTitle\" placeholder=\"Type a movie title\" />\n            </form>\n            <div className=\"loadingContainer\">\n              <Loading loading={loading} />\n            </div>\n          </div>\n          <ul className=\"results\" id=\"results\">\n            {/* Search results go here */}\n            <SearchResults movies={movies} inputValue={inputValue} nominated={nominated} setNominated={setNominated} searched={searched} />\n          </ul>\n          <div className=\"saveContainer\">\n            <Save nominated={nominated} setNominated={setNominated} />\n          </div>\n          <ul className=\"nominations\" id=\"nominations\">\n            {/* Nominations go here */}\n            <Nominated nominated={nominated} setNominated={setNominated} />\n          </ul>\n          <div className=\"saveContainer\">\n            <Save nominated={nominated} setNominated={setNominated} />\n          </div>\n        </div>\n      </main>\n    );\n  }\n};\n\nexport default Main;","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport firebase from './firebase';\nimport Loading from './Loading';\n\nfunction Nominations() {\n\n  const [displayedNominations, setDisplayedNominations] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Pull saved movie nominations from firebase\n  useEffect(() => {\n    setLoading(true);\n    const dbRef = firebase.database().ref();\n\n    setTimeout(() => {\n      dbRef.on('value', (response) => {\n        const newState = [];\n        const data = response.val();\n        for (let key in data) {\n          newState.push({ key: key, movie: data[key] });\n        }\n\n        // Filter out duplicate nominations by ID (imdbID)\n        const uniqueNominations = newState.filter((v, i, a) => a.findIndex(t => (t.movie.ID === v.movie.ID)) === i);\n\n        // Sort nominations in descending order by number of votes\n        const sortedNominations = uniqueNominations.sort(function(a, b) {\n          return parseFloat(b.movie.Votes) - parseFloat(a.movie.Votes);\n        });\n\n        setDisplayedNominations(sortedNominations);\n        setLoading(false)\n      });\n    }, 1000)\n  }, []);\n\n  // Function to increase movie vote count by one on vote click\n  const incrementVotes = (e) => {\n    console.log(e);\n    const ID = e.key;\n    const dbRef = firebase.database().ref(`/${ID}/Votes`);\n    dbRef.once('value', (result)=> {\n      const results = result.val()\n      dbRef.set(results + 1)\n    })\n  }\n\n  return (\n    <>\n      <main>\n        <div className=\"wrapper\">\n          <Link to=\"/bestFlix\" className=\"link2\"><span><i className=\"fas fa-arrow-left\"></i></span> Back</Link>\n          <h3 className=\"awardNominees\">Award nominees:</h3>\n          <div className=\"loadingContainer\">\n            <Loading loading={loading} />\n          </div>\n          <ul className=\"nominations\">\n            {/* Saved nominations go here */}\n            {displayedNominations.map((movieArray) => {\n            return (\n              <li key={movieArray.key} className=\"movie\">\n                <div className=\"imgContainer\">\n                  <img src={movieArray.movie.Poster} alt={movieArray.movie.Title} />\n                </div>\n                <div className=\"movieText\">\n                  <p><span className=\"info\">Title</span>: {movieArray.movie.Title}</p>\n                  <p><span className=\"info\">Year</span>: {movieArray.movie.Year}</p>\n                  <button className=\"voteButton\" onClick={() => incrementVotes(movieArray)} aria-label=\"Vote\"><i className=\"fas fa-heart\"></i></button>\n                  <p><span className=\"info\">Votes</span>: {movieArray.movie.Votes}</p>\n                </div>\n              </li>\n            )\n          })}\n          </ul>\n          <Link to=\"/bestFlix\" className=\"link2\"><span><i className=\"fas fa-arrow-left\"></i></span> Back</Link>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default Nominations;","import React from 'react';\n\nfunction Footer() {\n  return (\n      <footer>\n        <div className=\"wrapper\">\n        <p><a href=\"https://lucassilbernagel.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Lucas Silbernagel</a> <i className=\"far fa-copyright\" aria-label=\"copyright\"></i> 2020</p>\n        <p> Data provided by <a href=\"http://www.omdbapi.com/\" target=\"_blank\" rel=\"noopener noreferrer\">OMDb API</a></p>\n        </div>\n      </footer>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport './App.scss';\nimport Header from './Components/Header';\nimport Main from './Components/Main';\nimport Nominations from './Components/Nominations'\nimport Footer from './Components/Footer';\nimport { Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <>\n      <Header />      \n      <Switch>\n        <Route exact path=\"/bestFlix\" component={Main} />\n        <Route path=\"/bestFlix/nominations\" component={Nominations} />\n      </Switch>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}